generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  username  String
  password  Password?
  notes     Note[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Password {
  id        String    @id @default(cuid())
  hash      String
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Note {
  id            String       @id @default(cuid())
  content       String
  userId        String       @unique
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId    String?      @unique
  customer      Customer?    @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addressId     String?      @unique
  address       Address?     @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  appointmentId String?      @unique
  appointment   Appointment? @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime?    @updatedAt
}

model Customer {
  id           String        @id @default(cuid())
  firstName    String
  lastName     String
  contact      String
  appointments Appointment[]
  addresses    Address[]
  suspended    Boolean       @default(false)
  suspendedAt  DateTime?
  note         Note?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt

  @@unique([firstName, contact])
}

model Appointment {
  id          String    @id @default(cuid())
  recurring   Boolean   @default(false)
  frequency   Int?
  customerId  String
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addressId   String
  address     Address   @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  start       String    @unique
  end         String    @unique
  completed   Boolean   @default(false)
  completedAt DateTime?
  note        Note?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

}

model Address {
  id           String        @id @default(cuid())
  customer     Customer?     @relation(fields: [customerId], references: [id], onUpdate: Cascade)
  customerId   String?
  appointments Appointment[]
  number       String?
  line1        String
  line2        String?
  suburb       String
  archived     Boolean       @default(false)
  note         Note?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt

  @@index([customerId])
}
